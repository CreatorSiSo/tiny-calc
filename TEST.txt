# Tests

This file was auto generated by the `test.py` script.
Snapshot tests can be found in the `tests` folder.
The output of a test combines `stdin`, `stdout` and `stderr` in one string.


## Constants

Command: tiny-calc --plain
Inputs: ["pi\n"]
Output:
```
3.141592653589793

```

## Plain output

Command: tiny-calc --plain
Inputs: ["+ 1 2\n", "+ 20 + 19 + 18 + 17 + 16 + 15 + 14 + 13 + 12 + 11 + 10 9\n", "* 20 0.11\n", "/ 5 2\n", "/ 18 2.2\n"]
Output:
```
3
174
2.2
2.5
8.181818181818182

```

## Command line help

Command: tiny-calc --help
Inputs: []
Output:
```
A very minimal terminal calculator with a bit of an unusual syntax.

Usage:
  tiny-calc [OPTIONS]

Options:
  -h, --help, -?     Print this help message
  --plain            Only print the results of the calculation,
                     or error messages (useful for piping)
  --print-tokens     Print token streams
  --print-chunks     Print compiled chunks

```

## Wrong command line arguments

Command: tiny-calc --test -- -9 -10
Inputs: []
Output:
```
Error: Invalid argument '--test'

Usage:
  tiny-calc [OPTIONS]

Options:
  -h, --help, -?     Print this help message
  --plain            Only print the results of the calculation,
                     or error messages (useful for piping)
  --print-tokens     Print token streams
  --print-chunks     Print compiled chunks

```

## Command line arguments

Command: tiny-calc --print-tokens --print-chunks
Inputs: ["+ 1 2\n", "/ pi 2\n"]
Output:
```
Welcome to tiny-calc!
Type :help if you are lost =)
>> + 1 2
Tokens:
    Plus[+] 0..1
    Number[1] 2..3
    Number[2] 4..5
OpCodes:
    [0] Literal
    [1] Literal
    [2] Add
Literals:
    [0] 2
    [1] 1
3
>> / pi 2
Tokens:
    Slash[/] 0..1
    Identifier[pi] 2..4
    Number[2] 5..6
OpCodes:
    [0] Literal
    [1] Literal
    [2] Div
Literals:
    [0] 2
    [1] 3.141592653589793
1.5707963267948966
>> CTRL+D
```

## Addition

Command: tiny-calc --print-tokens --print-chunks
Inputs: ["+ 1 + 2 + 3 + 4 5\n"]
Output:
```
Welcome to tiny-calc!
Type :help if you are lost =)
>> + 1 + 2 + 3 + 4 5
Tokens:
    Plus[+] 0..1
    Number[1] 2..3
    Plus[+] 4..5
    Number[2] 6..7
    Plus[+] 8..9
    Number[3] 10..11
    Plus[+] 12..13
    Number[4] 14..15
    Number[5] 16..17
OpCodes:
    [0] Literal
    [1] Literal
    [2] Add
    [3] Literal
    [4] Add
    [5] Literal
    [6] Add
    [7] Literal
    [8] Add
Literals:
    [0] 5
    [1] 4
    [2] 3
    [3] 2
    [4] 1
15
>> CTRL+D
```

## Functions

Command: tiny-calc --print-tokens --print-chunks
Inputs: ["s 0\n", "sin * 2 pi\n", "c * 2 pi\n", "cos 0\n", "cos * 1.5 pi\n", "cos * / 1 4 pi\n"]
Output:
```
Welcome to tiny-calc!
Type :help if you are lost =)
>> s 0
Tokens:
    Identifier[s] 0..1
    Number[0] 2..3
OpCodes:
    [0] Literal
    [1] Sin
Literals:
    [0] 0
0
>> sin * 2 pi
Tokens:
    Identifier[sin] 0..3
    Star[*] 4..5
    Number[2] 6..7
    Identifier[pi] 8..10
OpCodes:
    [0] Literal
    [1] Literal
    [2] Mul
    [3] Sin
Literals:
    [0] 3.141592653589793
    [1] 2
-2.4492935982947064e-16
>> c * 2 pi
Tokens:
    Identifier[c] 0..1
    Star[*] 2..3
    Number[2] 4..5
    Identifier[pi] 6..8
OpCodes:
    [0] Literal
    [1] Literal
    [2] Mul
    [3] Cos
Literals:
    [0] 3.141592653589793
    [1] 2
1
>> cos 0
Tokens:
    Identifier[cos] 0..3
    Number[0] 4..5
OpCodes:
    [0] Literal
    [1] Cos
Literals:
    [0] 0
1
>> cos * 1.5 pi
Tokens:
    Identifier[cos] 0..3
    Star[*] 4..5
    Number[1.5] 6..9
    Identifier[pi] 10..12
OpCodes:
    [0] Literal
    [1] Literal
    [2] Mul
    [3] Cos
Literals:
    [0] 3.141592653589793
    [1] 1.5
-1.8369701987210297e-16
>> cos * / 1 4 pi
Tokens:
    Identifier[cos] 0..3
    Star[*] 4..5
    Slash[/] 6..7
    Number[1] 8..9
    Number[4] 10..11
    Identifier[pi] 12..14
OpCodes:
    [0] Literal
    [1] Literal
    [2] Literal
    [3] Div
    [4] Mul
    [5] Cos
Literals:
    [0] 3.141592653589793
    [1] 4
    [2] 1
0.7071067811865476
>> CTRL+D
```

## REPL commands

Command: tiny-calc 
Inputs: [":help\n", ":?\n", ":invalid\n", ":chunks\n", ":tokens\n", "sin 0\n", ":quit\n"]
Output:
```
Welcome to tiny-calc!
Type :help if you are lost =)
>> :help
:help, :?      Print command help
:examples      Print expression examples
:quit, :exit   Exit calculator (or press CTRL+C)
:tokens        Toggle printing token streams
:chunks        Toggle printing compiled chunks
>> :?
:help, :?      Print command help
:examples      Print expression examples
:quit, :exit   Exit calculator (or press CTRL+C)
:tokens        Toggle printing token streams
:chunks        Toggle printing compiled chunks
>> :invalid
Error: Unkown command <:invalid>
Note: Type <:help> for a list of valid commands
>> :chunks
>> :tokens
>> sin 0
Tokens:
    Identifier[sin] 0..3
    Number[0] 4..5
OpCodes:
    [0] Literal
    [1] Sin
Literals:
    [0] 0
0
>> :quit

```

## Empty lines

Command: tiny-calc --print-tokens --print-chunks
Inputs: ["\n", "\t\t\n", "  \n"]
Output:
```
Welcome to tiny-calc!
Type :help if you are lost =)
>> 
>> 		
>>   
>> CTRL+D
```

